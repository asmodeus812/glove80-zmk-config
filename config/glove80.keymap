#define ZMK_POINTING_DEFAULT_MOVE_VAL 1400  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 40    // default: 10

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define STRINGIFY(x) #x
#define EXPAND_AND_STRINGIFY(x) STRINGIFY(x)

#define KEYS_NONE
#define HYPER LS(LC(LA(LGUI)))

#define KEYS_LEFT 0 1 2 3 4 \
                  10 11 12 13 14 15 \
                  22 23 24 25 26 27 \
                  34 35 36 37 38 39 \
                  46 47 48 49 50 51 \
                  64 65 66 67 68

#define KEYS_RIGHT 5 6 7 8 9 \
                   16 17 18 19 20 21 \
                   28 29 30 31 32 33 \
                   40 41 42 43 44 45 \
                   58 59 60 61 62 63 \
                   75 76 77 78 79

#define THUMBS_LEFT 69 52 70 53 71 54

#define THUMBS_RIGHT 55 56 57 72 73 74

#define THUMBS THUMBS_LEFT THUMBS_RIGHT

#define MORPH(ID, LOWER, UPPER, MRPH) \
    ID: mod_morph_##ID { \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <&kp LOWER>, <&kp UPPER>; \
        mods = <(MRPH)>; \
    };

#define SUPER(ID, FIRST, SECOND, TERM, QTAP, RPI, KEYS, FLAVE) \
    ID: mod_tap_##ID { \
        compatible = "zmk,behavior-hold-tap"; \
        quick_tap_ms = <QTAP>; \
        tapping-term-ms = <TERM>; \
        flavor = FLAVE; \
        #binding-cells = <2>; \
        bindings = <&FIRST>, <&SECOND>; \
        require-prior-idle-ms = <RPI>; \
        hold-trigger-key-positions = <KEYS>; \
    };

#define MAGIC(ID, FIRST, SECOND, TERM) \
    ID: mag_tap_##ID { \
        compatible = "zmk,behavior-hold-tap"; \
        label = "MAGIC_HOLD_TAP"; \
        flavor = "tap-preferred"; \
        tapping-term-ms = <TERM>; \
        #binding-cells = <2>; \
        bindings = <&FIRST>, <&SECOND>; \
    };


#define AZURE      RGB_COLOR_HSB(210, 100, 100)
#define BLACK      RGB_COLOR_HSB(0,   0,   0)
#define BLOSSOM    RGB_COLOR_HSB(330, 50,  100)
#define BLUE       RGB_COLOR_HSB(240, 100, 100)
#define BROWN      RGB_COLOR_HSB(30,  100, 50)
#define BURGUNDY   RGB_COLOR_HSB(0,   100, 40)
#define BUTTER     RGB_COLOR_HSB(60,  50,  100)
#define CHARCOAL   RGB_COLOR_HSB(0,   0,   25)
#define COCOA      RGB_COLOR_HSB(20,  100, 40)
#define CYAN       RGB_COLOR_HSB(180, 100, 100)
#define FOREST     RGB_COLOR_HSB(120, 100, 40)
#define GRAY       RGB_COLOR_HSB(0,   0,   50)
#define GREELOW    RGB_COLOR_HSB(90,  100, 100)
#define GREEN      RGB_COLOR_HSB(120, 100, 100)
#define IVORY      RGB_COLOR_HSB(60,  10,  100)
#define LIME       RGB_COLOR_HSB(75,  100, 100)
#define MAGENTA    RGB_COLOR_HSB(300, 100, 100)
#define MINT       RGB_COLOR_HSB(150, 50,  100)
#define NAVY       RGB_COLOR_HSB(240, 100, 40)
#define OLIVE      RGB_COLOR_HSB(60,  100, 40)
#define ORANGE     RGB_COLOR_HSB(30,  100, 100)
#define PEACH      RGB_COLOR_HSB(20,  60,  100)
#define PERIWINKLE RGB_COLOR_HSB(240, 50,  100)
#define PINK       RGB_COLOR_HSB(0,   50,  100)
#define PLUM       RGB_COLOR_HSB(300, 100, 40)
#define PURPLE     RGB_COLOR_HSB(270, 100, 50)
#define RED        RGB_COLOR_HSB(0,   100, 100)
#define ROSE       RGB_COLOR_HSB(330, 100, 100)
#define SEAFOAM    RGB_COLOR_HSB(160, 50,  100)
#define SILVER     RGB_COLOR_HSB(0,   0,   75)
#define SKY        RGB_COLOR_HSB(210, 50,  100)
#define SPRING     RGB_COLOR_HSB(150, 100, 100)
#define STEEL      RGB_COLOR_HSB(210, 10,  70)
#define TEAL       RGB_COLOR_HSB(180, 100, 50)
#define VIOLET     RGB_COLOR_HSB(270, 100, 100)
#define WHITE      RGB_COLOR_HSB(0,   0,   100)
#define YELLOW     RGB_COLOR_HSB(60,  100, 100)

&sk {
    quick-release;
    release-after-ms = <500>;
    /delete-property/ ignore-modifiers;
};

&soft_off {
    hold-time-ms = <2000>;
};

&caps_word {
    continue-list = <UNDERSCORE SEMI PIPE AMPS MINUS BACKSPACE DELETE LSHFT RSHFT>;
};

/ {
    behaviors {
        #include "macros.dtsi"

        MAGIC(mag, mo, rgb_ug_status_macro, 185)

        SUPER(lkp, mo, kp,        130, 165, 0, KEYS_NONE, "hold-preferred")
        SUPER(kpp, kp, kp,        130, 0,   0, KEYS_NONE, "hold-preferred")
        SUPER(lcw, kp, caps_word, 130, 0,   0, KEYS_NONE, "hold-preferred")

        SUPER(kpr, kp, kp, 130, 165, 0, KEYS_LEFT  THUMBS_LEFT,  "tap-preferred")
        SUPER(kpl, kp, kp, 130, 0,   0, KEYS_RIGHT THUMBS_RIGHT, "tap-preferred")

        MORPH(one,   EXCL,   N1, MOD_LSFT|MOD_RSFT)
        MORPH(two,   AT,     N2, MOD_LSFT|MOD_RSFT)
        MORPH(three, HASH,   N3, MOD_LSFT|MOD_RSFT)
        MORPH(four,  DOLLAR, N4, MOD_LSFT|MOD_RSFT)
        MORPH(five,  PRCNT,  N5, MOD_LSFT|MOD_RSFT)
        MORPH(six,   CARET,  N6, MOD_LSFT|MOD_RSFT)
        MORPH(seven, AMPS,   N7, MOD_LSFT|MOD_RSFT)
        MORPH(eight, ASTRK,  N8, MOD_LSFT|MOD_RSFT)
        MORPH(nine,  LPAR,   N9, MOD_LSFT|MOD_RSFT)
        MORPH(zero,  RPAR,   N0, MOD_LSFT|MOD_RSFT)
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
                &macro_backtick &macro_angles &macro_brackets &macro_quotes &none                                                                          &none &macro_dquotes &macro_parens &macro_braces &macro_block
                &mo 3           &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                                                                                       &kp N6  &kp N7    &kp N8     &kp N9   &kp N0    &mag 2 0
                &kpp LALT TAB   &kp Q   &kp W   &kp E     &kp R     &kp T                                                                                        &kp Y   &kp U     &kp I      &kp O    &kp P     &kpp RALT DEL
                &kpp LSHFT ESC  &kp A   &kp S   &kp D     &kp F     &kp G                                                                                        &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kpp RSHFT ENTER
                &kpp LCTRL CAPS &kp Z   &kp X   &kp C     &kp V     &kp B   &lcw LGUI 0      &mo 1          &mo 3     &mag 2 0 &mo 1            &kpp RGUI DEL    &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kpp RCTRL SQT
                &kpp LGUI SLCK  &kp TAB &kp SQT &kp BSLH  &kp EQUAL         &kpl LSHFT SPACE &kpp LCTRL ESC &kp LALT  &kp RALT &kpp RCTRL ENTER &kpr RSHFT BSPC          &kp MINUS &kp LBKT   &kp RBKT &kp GRAVE &kpp RGUI PSCRN
            >;
        };
        fun {
            display-name = "Fun";
            bindings = <
                &none           &none     &none          &none        &none                                                                                              &none        &none        &none         &none     &none
                &kp F10         &kp F1    &kp F2         &kp F3       &kp F4          &kp F5                                                                &kp F6       &kp F7       &kp F8       &kp F9        &kp F10   &kp F12
                &macro_backtick &kp LALT  &kp LA(LEFT)   &kp LA(DOWN) &kp LA(UP)      &kp LA(RIGHT)                                                         &kp LC(LEFT) &kp RC(DOWN) &kp RC(UP)   &kp RC(RIGHT) &kp RALT  &macro_block
                &macro_quotes   &kp LSHFT &mmv MOVE_LEFT &mmv MOVE_UP &mmv MOVE_DOWN  &mmv MOVE_RIGHT                                                       &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT     &kp RSHFT &macro_dquotes
                &macro_parens   &kp LCTRL &kp LG(LEFT)   &kp LG(DOWN) &kp LG(UP)      &kp LG(RIGHT)   &mkp MB1 &mkp MB2 &mkp MB3 &mkp MB3 &mkp MB2 &mkp MB1 &kp HOME     &kp PG_DN    &kp PG_UP    &kp END       &kp RCTRL &macro_braces
                &macro_angles   &kp LGUI  &kp  C_PP      &kp C_PREV   &kp C_NEXT                      &trans   &trans   &trans   &trans   &trans   &trans                &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE    &kp RGUI  &macro_brackets
            >;
        };
        mod {
            display-name = "Mod";
            bindings = <
                &none       &none            &none           &none           &none                                                                                &none          &none         &none         &none            &none
                &bt BT_CLR  &bt_0            &bt_1           &bt_2           &bt_3           &bt_4                                                &bt BT_DISC 0   &bt BT_DISC 1  &bt BT_DISC 2 &bt BT_DISC 3 &bt BT_DISC 4    &bt BT_CLR
                &bootloader &rgb_ug RGB_SPI  &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                      &rgb_ug MAGENTA &rgb_ug TEAL   &rgb_ug LIME  &rgb_ug MINT  &rgb_ug ROSE     &bootloader
                &sys_reset  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                      &rgb_ug VIOLET  &rgb_ug AZURE  &rgb_ug AZURE &rgb_ug NAVY  &rgb_ug BURGUNDY &sys_reset
                &soft_off   &none            &none           &none           &none           &none           &none &none &none &none &none &none  &rgb_ug BLOSSOM &rgb_ug SPRING &rgb_ug IVORY &rgb_ug PEACH &rgb_ug PLUM     &soft_off
                &none       &none            &none           &rgb_ug RGB_EFF &rgb_ug RGB_TOG                 &none &none &none &none &none &none                &rgb_ug RGB_BRD &rgb_ug RGB_BRI &none        &none            &none
            >;
        };
        num {
            display-name = "Pad";
            bindings = <
                &none   &none   &none   &none    &none                                                                 &none          &none           &none           &none         &none
                &trans  &trans  &trans  &trans  &trans  &trans                                                   &none &kp KP_NUM     &kp KP_DIVIDE   &kp KP_MULTIPLY &kp KP_EQUAL  &none
                &trans  &trans  &trans  &trans  &trans  &trans                                                   &none &kp KP_N7      &kp KP_N8       &kp KP_N9       &kp KP_MINUS  &none
                &trans  &trans  &trans  &trans  &trans  &trans                                                   &none &kp KP_N4      &kp KP_N5       &kp KP_N6       &kp KP_PLUS   &none
                &trans  &trans  &trans  &trans  &trans  &trans     &trans &trans &trans &trans &trans &trans     &none &kp KP_N1      &kp KP_N2       &kp KP_N3       &kp KP_ENTER  &none
                &trans  &trans  &trans  &trans  &trans             &trans &trans &none  &trans &trans &trans           &kp KP_COMMA   &kp KP_NUMBER_0 &kp KP_DOT      &kp KP_ENTER  &none
            >;
        };
    };
};
